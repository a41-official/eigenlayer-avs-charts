apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "eigenda.fullname" . }}-proxy-config
data:
  rate-limit-nginx.conf: |-
    limit_req_zone $binary_remote_addr zone=ip:10m rate=${REQUEST_LIMIT};
    server {
        listen ${NODE_RETRIEVAL_PORT};
        client_max_body_size 1M;
        http2 on;
        location / {
            limit_req zone=ip burst=${BURST_LIMIT} nodelay;
            limit_req_status 429;
            grpc_set_header X-Real-IP $remote_addr;
            grpc_pass grpc://${NODE_HOST}:${NODE_INTERNAL_RETRIEVAL_PORT};
        }
    }
    server {
        listen ${NODE_API_PORT};
        client_max_body_size 1M;
        http2 on;
        location / {
            limit_req zone=ip burst=${BURST_LIMIT} nodelay;
            limit_req_status 429;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://${NODE_HOST}:${NODE_INTERNAL_API_PORT};
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "eigenda.fullname" . }}-proxy-env
data:
  REQUEST_LIMIT: "10r/s"
  BURST_LIMIT: "50"
  NODE_HOST: localhost
  NODE_API_PORT: {{ .Values.apiPort | quote }}
  NODE_INTERNAL_API_PORT: {{ .Values.internalApiPort | quote }}
  NODE_RETRIEVAL_PORT: {{ .Values.retrievalPort | quote }}
  NODE_INTERNAL_RETRIEVAL_PORT: {{ .Values.internalRetrievalPort | quote }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "eigenda.fullname" . }}-node-env
data:
  # These are used for testing purpose
  NODE_TEST_PRIVATE_BLS: ""
  NODE_PRIVATE_KEY: ""

  # EigenDA specific configs
  NODE_EXPIRATION_POLL_INTERVAL: "180"
  NODE_CACHE_ENCODED_BLOBS: "true"
  NODE_NUM_WORKERS: "1"
  NODE_DISPERSAL_PORT: {{ .Values.dispersalPort | quote }}

  # This is a dummy value for now. This won't be used as we are explicitly asking for quorum while opting in/out
  # In future release, this will be removed
  NODE_QUORUM_ID_LIST: {{ .Values.quorumIdList }}

  NODE_VERBOSE: "true"
  NODE_RETRIEVAL_PORT: {{ .Values.retrievalPort | quote }}
  NODE_TIMEOUT: 20s
  NODE_SRS_ORDER: "268435456"
  NODE_SRS_LOAD: "8388608"

  # If you are using a reverse proxy in a shared network space, the reverse proxy should listen at $NODE_DISPERSAL_PORT
  # and forward the traffic to $NODE_INTERNAL_DISPERSAL_PORT, and similarly for retrieval. The DA node will register the
  # $NODE_DISPERSAL_PORT port on the chain and listen for the reverse proxy at $NODE_INTERNAL_DISPERSAL_PORT.
  NODE_INTERNAL_DISPERSAL_PORT: {{ .Values.dispersalPort | quote }}
  NODE_INTERNAL_RETRIEVAL_PORT: {{ .Values.internalRetrievalPort | quote }}

  # Reachability Check
  NODE_REACHABILITY_POLL_INTERVAL: "60"
  {{- if eq .Values.network "mainnet" }}
  NODE_DATAAPI_URL: https://dataapi.eigenda.xyz
  {{ else }}
  NODE_DATAAPI_URL: https://dataapi-holesky.eigenda.xyz
  {{- end }}

  # EigenDA mounted locations
  {{- if .Values.secrets.ecdsaKeystore }}
  NODE_ECDSA_KEY_FILE: /app/.eigenlayer/operator_keys/ecdsa.key.json
  {{- end }}
  NODE_BLS_KEY_FILE: /app/.eigenlayer/operator_keys/bls.key.json
  NODE_G1_PATH: /data/g1.point
  NODE_G2_POWER_OF_2_PATH: /data/g2.point.powerOf2
  NODE_CACHE_PATH: /data/cache
  NODE_LOG_PATH: /data/logs/opr.log
  NODE_DB_PATH: /data/operator/db

  # Node logs configs
  NODE_LOG_LEVEL: debug
  NODE_LOG_FORMAT: text

  # Metrics specific configs
  NODE_ENABLE_METRICS: "true"
  NODE_METRICS_PORT: {{ .Values.metricsPort | quote }}

  # Node API specific configs
  NODE_ENABLE_NODE_API: "true"
  NODE_API_PORT: {{ .Values.internalApiPort | quote }}

  {{- if eq .Values.network "mainnet" }}
  # mainnet smart contracts
  NODE_EIGENDA_SERVICE_MANAGER: 0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0
  NODE_BLS_OPERATOR_STATE_RETRIVER: 0xD5D7fB4647cE79740E6e83819EFDf43fa74F8C31
  {{ else }}
  # holesky smart contracts
  NODE_EIGENDA_SERVICE_MANAGER: 0xD4A7E1Bd8015057293f0D0A557088c286942e84b
  NODE_BLS_OPERATOR_STATE_RETRIVER: 0xB4baAfee917fb4449f5ec64804217bccE9f46C67
  {{- end }}

  # Churner URL
  {{- if eq .Values.network "mainnet" }}
  NODE_CHURNER_URL: churner.eigenda.xyz:443
  {{ else }}
  NODE_CHURNER_URL: churner-holesky.eigenda.xyz:443
  {{- end }}

  # The name of the header used to get the client IP address
  # If set to empty string, the IP address will be taken from the connection.
  # The rightmost value of the header will be used.
  NODE_CLIENT_IP_HEADER: x-real-ip
  # How often to check the public IP address of the node. Set this to 0 to disable
  # automatic IP address updating (if you have a stable IP address)
  NODE_PUBLIC_IP_CHECK_INTERVAL: "0"

  ###############################################################################
  ####### TODO: Operators please update below values for your node ##############
  ###############################################################################
  # TODO: IP of your node
  NODE_HOSTNAME: {{ .Values.nodeHostname | default .Values.service.loadBalancerIP }}

  # TODO: Operators need to point this to a working chain rpc
  NODE_CHAIN_RPC: {{ .Values.ethRpcUrl }}
  {{- if eq .Values.network "mainnet" }}
  NODE_CHAIN_ID: "1"
  {{ else }}
  NODE_CHAIN_ID: "17000"
  {{- end }}

  # TODO: The ip provider service used to obtain a node's public IP [seeip (default), ipify)
  NODE_PUBLIC_IP_PROVIDER: seeip